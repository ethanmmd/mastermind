@startuml

package ethanmmd.mastermind #91DF5C{

    class Mastermind{
        - Board board;
        - void startGame();
        - void playGame();
        - boolean playAgain();
        + {static} void main(String[] args);
    }

    class Board{
        - SecretCombination secretCombination;
        - List<ProposedCombination> proposedCombinationList;

        + void write()
        + void addProposedCombination(ProposedCombination proposedCombination)
        + boolean isCodeBroken(ProposedCombination proposedCombination)
        + boolean isDecrypted(ProposedCombination proposedCombination)
        + boolean noMoreAttempts()
    }

    abstract class Combination(){
        + {static} final int COMBINATION_LENGTH = 4;
        # List<Color> colors;
    }

    class SecretCombination extends Combination{
        # Result getResult(ProposedCombination proposedCombination);
     }

    class ProposedCombination() extends Combination{
        - Result result;
        + void write();
        + void readUserInput();
        - GameError checkProposedCombinationFormat(String characters);
        - boolean checkAllowedColors(char[] characters);
        - String readProposedCombination();
        # boolean contains(Color color, int position);
        # boolean contains(Color color);
        + void setResult(Result result);
        + Result getResult();
     }

     class Result(){
        + {static} final int COMBINATION_LENGTH = 4;
        - int whitePegs = 0;
        - int blackPegs = 0;
        # boolean isDecrypted();
        + int getBlackPegs();
        + void setBlackPegs(int blackPegs);
        + int getWhitePegs();
        + void setWhitePegs(int whitePegs);
     }
     
     enum Color(){
        RED("r"),
        BLUE("b"),
        YELLOW("y"),
        GREEN("g"),
        ORANGE("o"),
        PURPLE("p");
        
        - String reference;     
        + String getReference();
        # {static} List<Color> getAllowedColors();
        # {static} Color getByReference(String reference);
     
     }
          
     enum GameError(){
         WRONG_PROPOSAL_LENGHT("Wrong proposed combination length"),
         WRONG_COLORES_ADVISE("Wrong colores, the must be: " + Color.getAllowedColors());
        - String message;
        # void writeln();
     }
          
     enum GameInfo(){
     
         TITLE("[*][*][*][*]WELCOME TO THE MASTERMIND[*][*][*][*]" + "\n"),
         SECRET_CODE_MESSAGE("---The secret code is waiting for you, are you ready?---"+ "\n"),
         DECRYPTION_ATTEMPT("Decryption attempts: %d/10"),
         DECRYPTION_PROPOSAL("Input your combination: "),
         DECRYPTION_RESULTS("Your decryption:  %s --> %d blacks and %d whites"),
         LOOSER_INFO("YOU LOSE!"),
         WIN_MESSAGE("WE HAVE A WINNER!!!"),
         RESUME("Do you want to %s again?");
     
         - String message;
         - Console console = Console.instance();
     
         # void write() ;
         # void writeln();
         # void writeln(int attempts);
         # void writeln(String combination, int blacks, int whites);
         + String getMessage();
     }




}

@enduml